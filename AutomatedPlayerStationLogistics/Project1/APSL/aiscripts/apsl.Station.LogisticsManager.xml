<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="apsl.Station.LogisticsManager" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="1">
  <!-- 
      This script handles all the caclulations for the station's wares priorities and sets initial reservations.
      The data that comes out is then used by ships assigned to the station. This script should only ever be
      attatched to player stations. It is not set up to work with NPC stations.
  -->
  <params>
    <param name="debugChance" default="0" />
  </params>
  <interrupts>
    <handler comment="Transfers credits from the station to the player if it's above the target threshold" consume="false">
      <conditions>
        <event_object_money_updated object="this.station"/>
      </conditions>
      <actions>
        <!--If the station's money goes above a given threshhold, transfer the difference between the desired money amount + buffer to the player.
            The reason to not immediately transfer above desired + buffer is just to not spam the player with notifications, and instead move
            sizeable amounts of money into the players account instead of many small transactions-->
        <do_if value="this.station.money ge (this.station.productionmoney * 1.5)">
          <!--TODO: Move the limits (1.5 and 1.3) from hardcoded amounts to a variable so in the future they can be changed if desired-->
          <set_value name="$transferAmount" exact="(this.station.money - this.station.productionmoney * 1.3)"/>
          <transfer_money from="this.station" to="player" amount="$transferAmount"/>
          <!--Notify Player - need to run_interrupt_script I think (see: trade.station.xml and player.interaction.budget)-->
          <run_interrupt_script name="'apsl.Player.Interaction.StationMoneyTransfer'" >
            <param name="station" value="this.station"/>
            <param name="transferAmount" value="$transferAmount"/>
          </run_interrupt_script>
          <remove_value name="$transferAmount"/>
        </do_if>
      </actions>
    </handler>
    <handler comment="The main evaluation for setting up the logistics data">
      <conditions>
        <check_any>
          <event_object_production_started object="this.station" />
          <event_trade_completed buyer="this.station" />
          <event_trade_cancelled buyer="this.station" />
          <event_object_destroyed group="$productionAndStorageModules"/>
          <event_hack_finished hacked="this.station" />
        </check_any>
      </conditions>
      <actions>
        <!--Just set isQueuedEvaluate to true, so the next main loop check will catch it.-->
        <set_value name="$isQueuedEvaluate" exact="true"/>
      </actions>
    </handler>
    <handler comment="Special handler for new production module being built on the station">
      <conditions>
        <event_build_finished_components object="this.station" />
      </conditions>
      <actions>
        <!--Looks like param2 (list) is a list of completed components. If it's an ordered list, then the last entry would be the just built component-->
        <do_if value="event.param2.last.primarypurpose == purpose.storage or event.param2.last.primarypurpose == purpose.production">
          <add_to_group groupname="$productionAndStorageModules" object="event.param2.last"/>
          <set_value name="$isQueuedEvaluate" exact="true"/>
        </do_if>
      </actions>
    </handler>
    <handler comment="Handler for when a station in range is destroyed">
      <conditions>
        <event_player_owned_destroyed />
        <check_value value="event.param.isclass.station"/>
      </conditions>
      <actions>
        <do_all exact="$thisStationLogisticsData.$stationsInRange.count" counter="$interestCounter">
          <do_if value="$thisStationLogisticsData.$stationsInRange.{$interestCounter}.station == event.param">
            <!--Found it, remove and break-->
            <remove_value name="$thisStationLogisticsData.$stationsInRange.{$interestCounter}"/>
            <break/>
          </do_if>
        </do_all>
      </actions>
    </handler>
    <handler comment="Handler for when the station manager (this) gets removed by the player">
      <conditions>
        <event_object_changed_assignment object="this"/>
      </conditions>
      <actions>
        <set_value name="$keepScriptAlive" exact="false"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <!--For creating a group for production/storage modules since a production facility being destroyed is a trigger for reevaluation-->
    <find_object_component object="this.station" groupname="$productionAndStorageModules" module="true" class="[class.production, class.storage]"/>
    <set_value name="$thisStationLogisticsData" exact="null"/>

    <do_if value="global.$apslData.$debug == true">
      <set_value name="$debugChance" exact="100"/>
    </do_if>
  </init>
  <attention min="unknown">
    <actions>
      <!--Actual init logic, since scripts can't be called from init, which is fucking stupid. Like this xml scripting language.-->
      <!--********* INIT Logic *********-->
      <!--
      Since it's theoretically possible for ships to already start searching for orders, but the evaluating variable may not exist
      yet, ships will need to handle an edge case of if no station data exists, and they should wait in that case. If they wait ~10s
      and nothing comes, then there's probably an error state.
    -->
      <!--Check if station logistics data exists already, and if not create it for this station-->
      <run_script name="'apsl.lib.GetStationData'">
        <param name="stationId" value="this.station.idcode"/>
        <save_retval name="stationData" variable="$thisStationLogisticsData"/>
      </run_script>

      <!--Doesn't already exist, create it.-->
      <do_if value="$thisStationLogisticsData == null">
        <run_script name="'apsl.lib.CreateNewStationEntry'">
          <param name="stationId" value="this.station.idcode"/>
          <param name="stationEntity" value="this.station"/>
          <param name="stationManager" value="this"/>
          <save_retval name="createdStationData" variable="$thisStationLogisticsData"/>
          <save_retval name="wasSuccessful" variable="$creationDataSuccessResult"/>
        </run_script>

        <do_if value="$creationDataSuccessResult == false">
          <!-- 
            This indicates something's gone really horribly wrong. Something really bad happened with the creation script, 
            since the only fail-state it should have is station data already exists, which is checked up above.
        -->
          <debug_to_file name="'apsl.log'" text="'APSL ERROR! Station logistics data creation failure (apsl.station.logisicsmanager/init). stationID: %1'.[this.station.idcode]" />
          <!--TODO: Notify player something broke and to not save their game. Will be terminating all scripts on this entity immediately.-->
          <!-- Call an interrupt script to handle the notification -->
          <abort_scripts entity="this"/>
        </do_if>
      </do_if>



      <!--Check for subordinate traders-->
      <do_if value="this.station.subordinates.{assignment.trade}.count gt 0">
        <set_value name="$hasSubordinateTrader" exact="true"/>
      </do_if>
      <do_else>
        <set_value name="$hasSubordinateTrader" exact="false"/>
      </do_else>

      <!--Check for cargo drones-->
      <do_if value="this.station.availableunits.{unitcategory.transport}.count gt 0">
        <set_value name="$hasCargoDrones" exact="true"/>
        <set_value name="$canTrade" exact="true"/>
      </do_if>
      <do_else>
        <set_value name="$hasCargoDrones" exact="false"/>
        <set_value name="$canTrade" exact="false"/>
      </do_else>

      <!--Get the last little bits set up for the main loop.-->
      <set_value name="$isQueuedEvaluate" exact="false"/>
      <set_value name="$keepScriptAlive" exact="true"/>
      <set_value name="$thisStationLogisticsData.$isEvaluating" exact="false"/>
      <set_value name="$thisStationLogisticsData.$isLogisticsActive" exact="true"/>
      <set_value name="$playerStationsInZone" exact="[]"/>

      <set_value name="$checkForNewStations" exact="false" />
      <set_value name="$mainActionSleepTime" exact="15s"/>
      <set_value name="$cycles" exact="0"/>
      <set_value name="$edgeCaseMaxCycles" exact="100"/>

      <run_script name="'apsl.Player.Interaction.StationLogisticsOnline'">
        <param name="station" value="this.station"/>
      </run_script>
      <!--********* End INIT Logic *********-->
      <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 Init(not init element) logic finished'.[this.station.name]" chance="$debugChance"/>

      <!--
        TODO: Need to figure out a good place to call shutdown. Also need a place to check if there's a trade ship subordinated to the station. The first time there's a ship attached (either
        detected via event or first run) set a variable to track the state. When that state changes (from ship to no ship) run the shutdown script, but pass in true for the second parameter.
      -->

      <!--Create a loop that only exits if this entity has been unassigned from their post as manager (not sure if firing causes the entity to cease existing?)-->
      <do_while value="$keepScriptAlive == true">
        <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 Interval loop starting...'.[this.station.name]" chance="$debugChance"/>
        <!--Insurance check for if the manager has somehow been removed from the station -->
        <do_if value="this.station? == false">
          <set_value name="$thisStationLogisticsData.$isLogisticsActive" exact="false"/>
          <run_script name="'apsl.lib.StationShutdown'">
            <param name="stationLogisticsData" value="$thisStationLogisticsData"/>
          </run_script>
          <break/>
        </do_if>

        <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 checking for subordinate traders'.[this.station.name]" chance="$debugChance"/>
        <!--Check for subordinate traders-->
        <do_if value="this.station.subordinates.{assignment.trade}.count lt 1">
          <do_if value="$hasSubordinateTrader == true">
            <!--We no longer have traders, but we did last time we checked. Do a light shutdown...-->
            <set_value name="$hasSubordinateTrader" exact="false"/>
            <run_script name="'apsl.lib.StationShutdown'">
              <param name="stationLogisticsData" value="$thisStationLogisticsData"/>
              <param name="isOperationalButNoShips" value="true"/>
            </run_script>
            <!--Notify player cargo-only dormancy mode-->
            <run_script name="'apsl.Player.Interaction.StationLogisticsShipDormancy'">
              <param name="station" value="this.station"/>
            </run_script>
          </do_if>
        </do_if>
        <do_else>
          <!--It now has a trade, if it didn't before, set hasSub to true and that's it.-->
          <do_if value="$hasSubordinateTrader == false">
            <set_value name="$hasSubordinateTrader" exact="true"/>
          </do_if>
        </do_else>

        <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 checking for cargo drones'.[this.station.name]" chance="$debugChance"/>
        <!--Check for cargo drones-->
        <do_if value="this.station.availableunits.{unitcategory.transport}.count lt 1">
          <!--If it had drones, but now doesn't, crap. Initiate full dormancy mode.-->
          <do_if value="$hasCargoDrones == true">
            <set_value name="$hasCargoDrones" exact="false"/>
            <set_value name="$canTrade" exact="false"/>
            <run_script name="'apsl.lib.StationShutdown'">
              <param name="stationLogisticsData" value="$thisStationLogisticsData"/>
            </run_script>
            <!--Notify Player full dormancy mode entered-->
            <run_script name="'apsl.Player.Interaction.StationLogisticsCargoDroneDormancy'">
              <param name="station" value="this.station"/>
            </run_script>
          </do_if>
        </do_if>
        <do_else>
          <!--If it didn't have cargo drones before, but does now, just need to set the appropriate flags-->
          <do_if value="$hasCargoDrones == false">
            <set_value name="$hasCargoDrones" exact="true"/>
            <!--TODO: Figure out if there are more possible things needed to determine (at this point) if a station can trade-->
            <set_value name="$canTrade" exact="true"/>
          </do_if>
        </do_else>

        <!--Periodic check for new stations. Does not need to happen often. Like once per half hour. Extreme edge case.-->
        <do_if value="$checkForNewStations == true">
          <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 checking for new stations in range'.[this.station.name]" chance="$debugChance"/>
          <run_script name="'apsl.lib.ProcessAllStationsInRange'">
            <param name="stationLogisticsTable" value="$thisStationLogisticsData"/>
          </run_script>

          <!--Check if any new stations are in the zone and not yet tracked...-->
          <run_script name="'apsl.lib.CheckInZonePlayerStations'">
            <param name="baseZone" value="this.station.zone"/>
            <param name="stationsInRange" value="$thisStationLogisticsData.$stationsInRange"/>
            <param name="alreadyFoundInZoneStations" value="$playerStationsInZone"/>
          </run_script>

          <set_value name="$checkForNewStations" exact="false" />
        </do_if>

        <!--Normal operations-->

        <!--If there is a queued evaluation, now we can re-evaluate-->
        <do_if value="$isQueuedEvaluate == true">
          <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 begining evaluation logic'.[this.station.name]" chance="$debugChance"/>
          <!--Set this right away,so if anything gets triggered up while processing it'll be accounted for.-->
          <set_value name="$isQueuedEvaluate" exact="false"/>

          <set_value name="$thisStationLogisticsData.$isEvaluating" exact="true"/>
          <!--
              Get the current buy offers to be used by this evaluation round. This snapshot is desireable
              even if it becomes outdated during the course of evaluation to keep the evaluation consistent.
          -->
          <find_buy_offer buyer="this.station" excludeempty="false" multiple="true" result="$buyOffers"/>
          <set_value name="$thisStationLogisticsData.$currentEvaluationBuyOffers" exact="$buyOffers"/>

          <!--Determine which list to use for EvaluateLogistics...-->
          <!--TODO: I need to determine if this station has cargo drones. If it doesn't I shouldn't evaluate even station to station goods (and should release them if cargo drones suddenly poof)-->
          <do_if value="$hasSubordinateTrader == true">
            <run_script name="'apsl.lib.EvaluateLogistics'">
              <param name="stationLogisticsData" value="$thisStationLogisticsData"/>
              <param name="stationManagerSkill" value="this.skill.management"/>
              <param name="buyOffers" value="$buyOffers"/>
            </run_script>
          </do_if>
          <do_elseif value="$hasCargoDrones">
            <run_script name="'apsl.lib.EvaluateLogistics'">
              <param name="stationLogisticsData" value="$thisStationLogisticsData"/>
              <param name="stationManagerSkill" value="this.skill.management"/>
              <param name="buyOffers" value="$buyOffers"/>
              <param name="stationsToCalculate" value="$playerStationsInZone"/>
            </run_script>
          </do_elseif>

          <set_value name="$thisStationLogisticsData.$currentEvaluationBuyOffers" exact="null"/>
          <set_value name="$thisStationLogisticsData.$isEvaluating" exact="false"/>
        </do_if>

        <!--Just a safetey eval being set. In case events that should trigger it get missed and whatnot-->
        <do_if value="$cycles gt 19 and $cycles % 20 == 0">
          <do_if value="$isQueuedEvaluate == false">
            <set_value name="$isQueuedEvaluate" exact="true"/>
          </do_if>
        </do_if>


        <!--TODO: Scan for station to station trades. May need to include both player to player and NPC stations since this script may take the place of trade.station-->
        <!--This may only need to run like once every 2-4 minutes or so.-->
        <!--TODO: Don't forget debug info for it...-->

        <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 Sleep wait...'.[this.station.name]" chance="$debugChance"/>
        <!--Sleep. Might need to play around with the time a bit to find a good balance.-->
        <wait exact="$mainActionSleepTime">
          <!--Might want some interrupt conditions at some point in the future?-->
        </wait>
        <!--Conclude cycles for rare edge case handling-->
        <set_value name="$cycles" exact="1" operation="add"/>

        <do_if value="$cycles ge $edgeCaseMaxCycles">
          <set_value name="$checkForNewStations" exact="true" />
          <set_value name="$cycles" exact="0"/>
        </do_if>
      </do_while>

      <debug_to_file name="'apsl.log'" text="'INFO! apsl.Station.LogisticsManager %1 shutting down'.[$thisStationLogisticsData.$station.name]" chance="$debugChance"/>

      <!--Exitting, just make sure everything is shut down.-->
      <run_script name="'apsl.lib.StationShutdown'">
        <param name="stationLogisticsData" value="$thisStationLogisticsData"/>
      </run_script>
    </actions>
  </attention>
</aiscript>
