<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="apsl.lib.CreateNewStationEntry" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="1">
  <!--
    Library function to add a new station to the list of tracked stations. 
    This function will fail if thw apsl global table and station logistics table do not yet exist
    -->
  <params>
    <param name="stationId" comment="REQUIRED! The id of the station to add" />
    <param name="stationEntity" comment="REQUIRED! The actual station entity"/>
    <param name="stationManager"  comment="REQUIRED!. The manager of the station" />
  </params>
  <attention min="unknown">
    <actions>
      <set_value name="$successResult" exact="false"/>

      <!--Parameter Validation-->
      <do_if value="$stationId? == false or (typeof $stationId).isstring != true">
        <debug_to_file name="'apsl.station_eval.log'" text="'ERROR! apsl.lib.CalculateAllInRangeStationWares parameter stationId either does not exist or was not a string!'"/>
        <return>
          <retval name="wasSuccessful" value="$successResult"/>
        </return>
      </do_if>
      <do_if value="$stationEntity? == false or $stationEntity.isclass.station == false">
        <debug_to_file name="'apsl.station_eval.log'" text="'ERROR! apsl.lib.stationEntity parameter stationEntity either does not exist or was not a station!'"/>
        <return>
          <retval name="wasSuccessful" value="$operationSuccessful"/>
        </return>
      </do_if>
      <do_if value="$stationManager? == false or $stationManager.isclass.entity == false">
        <debug_to_file name="'apsl.station_eval.log'" text="'ERROR! apsl.lib.stationEntity parameter stationManager either does not exist or was not an entity!'"/>

        <return>
          <retval name="wasSuccessful" value="$operationSuccessful"/>
        </return>
      </do_if>

      <do_if value="global.$apslData.$stationLogisticsData.{$stationId}? == false">
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}" exact="table[]"/>
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$station" exact="$stationEntity"/>
        <add_to_group groupname="global.$apslData.$stationsGroup" object="$stationEntity"/>
        <!--
          Variable to track if the station is currently evaluating. Since there are lib action calls and those are blocking
          it's possible for a ship to want orders while a station is in the middle of evaluating. This will need to be set to
          false once done being evaluated for the first time.
        -->
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$isEvaluating" exact="true"/>
        
        <!--ship job sync table-->
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$shipJobData" exact="table[]" />
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$shipJobData.$isShipTakingJob" exact="false"/>
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$shipJobData.$ship" exact="null"/>
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$shipJobData.$time" exact="null"/>

        <!--
            The logistics manager ai should set this to true once it's ready to go. It should be set to false when
            it's done (e.g. manager is unassigned).
        -->
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$isLogisticsActive" exact="false"/>


        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$manager" exact="$stationManager"/>
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$isLogisticsActive" exact="true"/>


        <!--Set up the rest of the result data using empty tables/lists and whatnot-->
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$stationsInRange" exact="[]"/>

        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$resourcePriorities" exact="[]"/>
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$resourceData" exact="table[]"/>

        <!-- Get clusters in range, and then the actual sectors in range as well-->
        <find_cluster_in_range distances="$foundClusters" maxdistance="global.$apslData.$absoluteMaxStationRange" object="$stationEntity" multiple="true"/>
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$clustersInRange" exact="$foundClusters"/>

        <!--Looks like I'll need to loop through these, since it doesn't like a list or table for space-->
        <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$sectorsInRange" exact="[]"/>
        <do_all exact="$foundClusters.keys.sorted.count" counter="$clusterCounter">
          <find_sector space="$foundClusters.keys.{$clusterCounter}" multiple="true" name="$foundSectors" />

          <do_if value="$foundSectors.count gt 0">
            <do_all exact="$foundSectors.count" counter="$sectorCounter">
              <append_to_list name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$sectorsInRange" exact="$foundSectors.{$sectorCounter}"/>
            </do_all>
          </do_if>
        </do_all>

        <run_script name="'apsl.lib.ProcessAllStationsInRange'">
          <param name="stationLogisticsTable" value="global.$apslData.$stationLogisticsData.{'$' + $stationId}"/>
        </run_script>

        <set_value name="$successResult" exact="true"/>
      </do_if>

      <!--It makes sense to return the newly created data entity, so assign here and return it.-->
      <set_value name="$stationDataResult" exact ="global.$apslData.$stationLogisticsData.{'$' + $stationId}" />
      <set_value name="global.$apslData.$stationLogisticsData.{'$' + $stationId}.$isEvaluating" exact="false"/>

      <return>
        <retval name="createdStationData" value="$stationDataResult"/>
        <retval name="wasSuccessful" value="$successResult"/>
      </return>
    </actions>
  </attention>
</aiscript>
